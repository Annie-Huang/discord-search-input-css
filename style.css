:root {
  --bg-color: hsl(223, 6.7%, 20.6%);
  --bg-color-dark: hsl(225, 6.3%, 12.5%);
  --foreground-color: hsl(210, 9.1%, 87%);
  --foreground-color-dark: hsl(214, 8.1%, 61.2%);
  --outline-color: hsl(200, 100%, 50%);
}

body {
  background-color: var(--bg-color);
  color: var(--foreground-color);
  font-family: Helvetica, Arial, sans-serif;
  margin: 0;
}

.row {
  display: flex;
  gap: 1rem;
  margin: 1rem;
  margin-top: 2rem;
}

.box {
  width: 30px;
  background-color: var(--foreground-color-dark);
}

.input {
  background-color: var(--bg-color-dark);
  color: var(--foreground-color);
  border: none;
  width: 9em;
  transition: width 0.25s;
  outline: none;
  border-radius: 0.25em;
  padding: 0.375em;
  font-size: 0.875em;
}

@media (prefers-reduced-motion: reduce) {
  .input {
    transition: none;
  }
}

.input::placeholder {
  color: var(--foreground-color-dark);
}

.input:focus-visible,
button:focus-visible {
  box-shadow: 0 0 0 0.25rem var(--outline-color);
}

.input:focus,
/* Meaning if there is text entered in the <input>, when user tab out, we still want to keep the long width */
.input:not(:placeholder-shown) {
  width: 15em;
}

.search-wrapper {
  position: relative;
}

.search-icon,
.x-icon {
  position: absolute;
  width: 1rem;
  height: 1rem;
  right: 0.25rem;
  top: 50%;
  translate: 0 -50%;
  color: var(--foreground-color-dark);

  rotate: 90deg;
  /* OMG, I cannot believe they use the same trick that I use for coles's search box. */
  opacity: 0;
  pointer-events: none;
  /* !!!! You will need to add the below to make it totally untabable, if you just use above, you just cannot click, but still be able to tab into it.
          You will need to do this in case, your animiation is slow. e.g. transition-duration: 0.5s;
  */
  visibility: hidden;

  border-radius: 0.25rem;

  /* Animation */
  /* Just the first two alone will make it disappear straight away when adding a letter, but slowly appear again when delete the letter */
  transition-property: opacity, rotate;
  transition-duration: 0.5s; /* If we change the speed to 0.15s (e.g. when it's fast enough). we don't even need to add visibility property at the top (line 82) and at the bottom (line 100) */
}

/* !!!! If our wrapper has a placeholder-shown in the input, then we will get the child component .search-icon from the wrapper and make it visible
   It has to use with the following "clears the ‘X’" section. Otherwise the X is shows the browser default one.
 */
.search-wrapper:has(.input:placeholder-shown) .search-icon,
.search-wrapper:has(.input:not(:placeholder-shown)) .x-icon {
  rotate: 0deg; /* cannot use 0, have to use 0deg */
  opacity: 1;
  pointer-events: all;
  visibility: visible;
}

button {
  all: unset; /* remove all agent styles for buttons */
  cursor: pointer;
}

/* clears the ‘X’ from Internet Explorer */
input[type='search']::-ms-clear,
input[type='search']::-ms-reveal {
  appearance: none;
  width: 0;
  height: 0;
}

/* clears the ‘X’ from Chrome */
/* !!!!! this is because we add type='search' for input, the browser has it's own X button. */
input[type='search']::-webkit-search-decoration,
input[type='search']::-webkit-search-cancel-button,
input[type='search']::-webkit-search-results-button,
input[type='search']::-webkit-search-results-decoration {
  appearance: none;
}
